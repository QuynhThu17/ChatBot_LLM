@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject UserService UserService
@inject CustomAuthStateProvider AuthProvider

<div class="layout-container">
    <div class="header">
        <div class="left">
            🔮 <b>ChatBot LLM</b>
        </div>
        <div class="right">
            @if (authState != null && authState.User.Identity.IsAuthenticated)
            {
                <span class="welcome-text">Xin chào: @authState.User.Identity.Name</span>
                <button class="btn-logout" @onclick="Logout">Đăng xuất</button>
            }
            else
            {
                <a class="btn btn-login" href="/login">Đăng nhập</a>
                <a class="btn btn-register" href="/register">Đăng ký</a>
            }
        </div>
    </div>

    <div class="page">
        <div class="sidebar">
            <NavMenu />
        </div>

        <main class="main">
            <article class="content px-4">
                @Body
            </article>
        </main>
    </div>
</div>

@code {
    private AuthenticationState? authState;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        await InvokeAsync(StateHasChanged);
    }

    private void Logout()
    {
        AuthProvider.NotifyUserLogout();
        _ = Task.Delay(50).ContinueWith(_ =>
        {
            InvokeAsync(() => Navigation.NavigateTo("/login"));
        });
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}

<style>
    .layout-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
    }

    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 30px;
        background-color: #310D6A;
        color: white;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    }

    .welcome-text {
        margin-right: 20px;
        font-weight: bold;
    }

    .btn-logout {
        background-color: #dc3545;
        color: white;
        padding: 8px 15px;
        border-radius: 5px;
        border: none;
        cursor: pointer;
        font-weight: bold;
    }

    .btn-login {
        background-color: #28a745;
        color: white;
        padding: 8px 15px;
        border-radius: 5px;
        text-decoration: none;
        margin-right: 10px;
    }

    .btn-register {
        background-color: #ffc107;
        color: black;
        padding: 8px 15px;
        border-radius: 5px;
        text-decoration: none;
    }

    .page {
        display: flex;
        flex-grow: 1;
        overflow: hidden;
    }

    .sidebar {
        width: 220px;
        background-color: #310D6A;
        color: white;
        display: flex;
        flex-direction: column;
        overflow-y: auto;
        box-shadow: 2px 0 5px rgba(0,0,0,0.2);
    }

    .main {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        background-color: #f8f9fa;
        overflow-y: auto;
    }

    .content {
        flex-grow: 1;
        padding: 20px;
    }
</style>
