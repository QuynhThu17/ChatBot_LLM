@page "/"
@page "/chat"
@using ChatBot_LLM.Domain.Models
@inject IChatbotService ChatbotService
@inject ChatHistoryService ChatHistoryService
@inject ChatUIHandler ChatUIHandler
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>Internal AI Platform</PageTitle>

<div class="home-page-container">
    <div class="header-section">
        <h1>Internal AI Platform</h1>
        <p class="lead">Empower your daily workflow with AI</p>
    </div>

    <div class="agents-section">
        <div class="agents-header">
            <h2>Your AI agents</h2>
            <div>
                <button class="btn btn-sm btn-outline-secondary me-2">Edit</button>
                <button class="btn btn-sm btn-outline-secondary">View all (21)</button>
            </div>
        </div>

        <div class="agent-cards-grid">
            @foreach (var agent in AgentList)
            {
                <div class="agent-card" @onclick='() => SelectAgent(agent.Name)'>
                    <div class="agent-icon">
                        @if (!string.IsNullOrEmpty(agent.IconUrl))
                        {
                            <img src="@agent.IconUrl" alt="@agent.Name Icon" onerror="this.src='/images/fallback-agent.png'" />
                        }
                        else
                        {
                            <span class="badge bg-dark text-white">@agent.Badge</span>
                        }
                    </div>
                    <div class="agent-info">
                        <h3>@agent.Name</h3>
                        <p>@agent.Description</p>
                    </div>
                </div>
            }
        </div>

        <div class="chat-container">
            <div class="chat-messages-container">
                @if (Messages.Any())
                {
                    @foreach (var message in Messages)
                    {
                        <div class="chat-message @(message.Role == "user" ? "user-message" : "ai-message")">
                            <div class="message-content">@((MarkupString)message.Content)</div>
                        </div>
                    }
                }
                else
                {
                    <div class="no-messages-placeholder">
                        Hãy bắt đầu cuộc trò chuyện với @(SelectedAgent ?? "một AI agent")...
                    </div>
                }
                <div id="messagesEndRef" @ref="messagesEndRef"></div>
            </div>
        </div>
    </div>

    <div class="bottom-input-section">
        <textarea @bind="UserMessage"
                  id="inputRef"
                  @ref="inputRef"
                  @onkeydown="HandleKeyDown"
                  class="form-control message-textarea"
                  placeholder="Nhập nội dung... Nhấn Enter để gửi"
                  rows="2">
        </textarea>

        <div class="input-icons">
            <div class="send-button-wrapper" @onclick="SendMessage" title="Gửi">
                <span class="oi oi-location"></span>
            </div>
            <div class="left-icons">
                <span class="oi oi-microphone" title="Ghi âm"></span>
                <span class="oi oi-image" title="Gửi ảnh"></span>
                <span class="oi oi-paperclip" title="Đính kèm"></span>
            </div>
        </div>
    </div>
</div>

<style>
	.home-page-container {
		padding: 2rem;
		background-color: #f0f2f5;
		border-radius: 8px;
		box-shadow: 0 2px 4px rgba(0,0,0,0.1);
	}

	.header-section {
		text-align: center;
		margin-bottom: 2rem;
	}

		.header-section h1 {
			font-size: 2.5rem;
			color: #333;
			margin-bottom: 0.5rem;
		}

		.header-section .lead {
			font-size: 1.1rem;
			color: #666;
		}

	.agents-section {
		background-color: white;
		padding: 1.5rem;
		border-radius: 8px;
		box-shadow: 0 1px 3px rgba(0,0,0,0.08);
		margin-bottom: 2rem;
	}

	.agents-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 1.5rem;
	}

	.agent-cards-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
		gap: 1.5rem;
	}

	.agent-card {
		display: flex;
		align-items: flex-start;
		padding: 1rem;
		border: 1px solid #e0e0e0;
		border-radius: 8px;
		background-color: #fff;
		box-shadow: 0 1px 3px rgba(0,0,0,0.05);
		transition: transform 0.2s ease;
		cursor: pointer;
	}

		.agent-card:hover {
			transform: translateY(-3px);
			box-shadow: 0 4px 8px rgba(0,0,0,0.1);
		}

	.agent-icon {
		flex-shrink: 0;
		margin-right: 1rem;
		width: 40px;
		height: 40px;
		display: flex;
		align-items: center;
		justify-content: center;
		border-radius: 50%;
		background-color: #f0f0f0;
		overflow: hidden;
	}

		.agent-icon img {
			width: 100%;
			height: 100%;
			object-fit: cover;
		}

		.agent-icon .badge {
			font-size: 1.2rem;
			padding: 0.5rem;
			line-height: 1;
			width: 100%;
			height: 100%;
			display: flex;
			align-items: center;
			justify-content: center;
			border-radius: 50%;
		}

	.chat-container {
		margin-top: 2rem;
		max-height: 400px;
		overflow-y: auto;
		padding: 1rem;
		border: 1px solid #e0e0e0;
		border-radius: 8px;
		background-color: #fff;
	}

	.chat-messages-container {
		display: flex;
		flex-direction: column;
		gap: 1rem;
	}

	.chat-message {
		max-width: 80%;
		padding: 0.75rem;
		border-radius: 8px;
	}

	.user-message {
		align-self: flex-end;
		background-color: #007bff;
		color: white;
	}

	.ai-message {
		align-self: flex-start;
		background-color: #f0f0f0;
		color: #333;
	}

	.message-content {
		word-break: break-word;
	}

	.no-messages-placeholder {
		text-align: center;
		color: #666;
		padding: 2rem;
		font-style: italic;
	}

	.bottom-input-section {
		background-color: white;
		padding: 1rem 1.5rem;
		border-radius: 8px;
		box-shadow: 0 1px 3px rgba(0,0,0,0.08);
		display: flex;
		align-items: center;
		margin-top: 2rem;
	}

	.message-textarea {
		flex-grow: 1;
		border: 1px solid #ced4da;
		border-radius: 0.5rem;
		padding: 0.75rem 1rem;
		font-size: 1rem;
		margin-right: 1rem;
	}

	.input-icons {
		display: flex;
		justify-content: space-between;
		align-items: center;
		gap: 0.75rem;
	}

	.left-icons {
		display: flex;
		gap: 0.75rem;
	}

		.left-icons .oi {
			font-size: 1.2rem;
			color: #6c757d;
			cursor: pointer;
			transition: color 0.2s;
		}

			.left-icons .oi:hover {
				color: #333;
			}

	.send-button-wrapper {
		background-color: #f1f4f9;
		color: black;
		border-radius: 50%;
		width: 52px;
		height: 52px;
		margin-right: 0;
		margin-left: 0.25rem;
		display: flex;
		align-items: center;
		justify-content: center;
		cursor: pointer;
		box-shadow: 0 2px 4px rgba(0,0,0,0.1);
		transition: background-color 0.2s ease;
	}

		.send-button-wrapper:hover {
			background-color: #e2e6ec;
		}
</style>


@code {
    private List<ChatHistory> Messages = new();
    private string UserMessage = "";
    private bool IsLoading = false;
    private string? SelectedAgent = null;
    private ElementReference messagesEndRef;
    private ElementReference inputRef;
    private string SessionId = "";
    private bool IsFirstUserMessage = true;

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);
        var sessionId = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("sessionId");
        SessionId = sessionId ?? ChatUIHandler.GetCurrentSessionId();
        Messages = await ChatHistoryService.GetBySessionIdAsync(SessionId);

        if (!Messages.Any())
        {
            Messages.Add(new ChatHistory
                {
                    Role = "assistant",
                    Content = "Chào bạn! Tôi là trợ lý AI. Hãy hỏi tôi bất cứ điều gì.",
                    SessionId = SessionId,
                    Timestamp = DateTime.Now
                });
            await ChatHistoryService.AddAsync(Messages.Last());
        }
        else
        {
            IsFirstUserMessage = !Messages.Any(m => m.Role == "user");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("scrollToElement", messagesEndRef);
            await JSRuntime.InvokeVoidAsync("focusElement", inputRef);
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(UserMessage) || IsLoading) return;

        IsLoading = true;

        var userMessage = new ChatHistory
            {
                SessionId = SessionId,
                Role = "user",
                Content = UserMessage,
                Timestamp = DateTime.Now
            };

        Messages.Add(userMessage);
        await ChatUIHandler.AddMessage(UserMessage, "user");

        if (IsFirstUserMessage)
        {
            var title = UserMessage.Length > 50 ? UserMessage.Substring(0, 50) + "..." : UserMessage;
            await ChatHistoryService.UpdateSessionTitleAsync(SessionId, title);
            IsFirstUserMessage = false;
        }

        UserMessage = "";
        StateHasChanged();

        var context = SelectedAgent != null
            ? $"Bạn là {SelectedAgent}. Hãy trả lời với vai trò này."
            : "Bạn là trợ lý AI chung.";

        try
        {
            var response = await ChatbotService.GetAnswerAsync(userMessage.Content, context);

            var botMessage = new ChatHistory
                {
                    SessionId = SessionId,
                    Role = "assistant",
                    Content = response,
                    Timestamp = DateTime.Now
                };

            Messages.Add(botMessage);
            await ChatUIHandler.AddMessage(response, "assistant");
        }
        catch (Exception ex)
        {
            var errorMessage = new ChatHistory
                {
                    SessionId = SessionId,
                    Role = "assistant",
                    Content = $"❗ Lỗi khi gửi: {ex.Message}",
                    Timestamp = DateTime.Now
                };
            Messages.Add(errorMessage);
            await ChatUIHandler.AddMessage(errorMessage.Content, "assistant");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
            await JSRuntime.InvokeVoidAsync("scrollToElement", messagesEndRef);
            await JSRuntime.InvokeVoidAsync("focusElement", inputRef);
        }
    }

    private async Task SelectAgent(string agentName)
    {
        SelectedAgent = agentName;

        var systemMessage = new ChatHistory
            {
                Role = "assistant",
                Content = $"Đã chọn {agentName}. Tôi có thể giúp gì cho bạn hôm nay?",
                SessionId = SessionId,
                Timestamp = DateTime.Now
            };

        Messages.Add(systemMessage);
        await ChatUIHandler.AddMessage(systemMessage.Content, "assistant");
        StateHasChanged();
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    private record AgentCard(string Name, string Description, string? IconUrl = null, string? Badge = null);

    private List<AgentCard> AgentList = new()
    {
        new("Sales Representative", "Trợ lý đại diện bán hàng AI...", "https://placehold.co/40x40", "Sales"),
        new("Market Research", "Giúp khám phá xu hướng, cảm nhận khách hàng...", "https://placehold.co/40x40", "Market"),
        new("Nutritionist", "Hỗ trợ nhu cầu ăn uống và ăn uống lành mạnh...", "https://placehold.co/40x40", "Nutrition"),
        new("SEO Blog Content", "Blogger dày dạn cho nội dung SEO", null, "SEO"),
        new("Life Hacker", "Giúp tối ưu hóa thói quen và lịch trình hàng ngày", "https://placehold.co/40x40", "Life"),
        new("Git Commands Assistant", "Hướng dẫn lệnh Git và thực tiễn tốt", null, "Git")
    };
}